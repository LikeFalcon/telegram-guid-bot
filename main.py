
like devil
23:43 (0 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥)
–∫–æ–º—É: –º–Ω–µ

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from datetime import datetime, timedelta
import os

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–∞–π–¥–æ–≤
guides = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
user_last_guide = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = "üëã Yo, –±—Ä–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Ç–≤–æ—è –∑–æ–Ω–∞ –ø—Ä–æ–∫–∞—á–∫–∏ üí™. –ì–æ—Ç–æ–≤ —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ, —É–º–Ω–µ–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏ –≤—ã–±–∏—Ä–∞–π –≥–∞–π–¥! üìöüî•"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–π–¥—ã", callback_data="view_guides")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def add_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–æ–≤, –±—Ä–æ.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add_guide <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ç–µ–∫—Å—Ç_–≥–∞–π–¥–∞>")
        return

    guide_name = context.args[0]
    guide_content = " ".join(context.args[1:])
    guides[guide_name] = guide_content
    await update.message.reply_text(f'‚úÖ –ì–∞–π–¥ "{guide_name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∞–π–¥–æ–≤
async def view_guides(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞
    last_guide_time = user_last_guide.get(user_id)
    if last_guide_time and datetime.now() - last_guide_time < timedelta(days=1):
        time_left = timedelta(days=1) - (datetime.now() - last_guide_time)
        hours, remainder = divmod(time_left.seconds, 3600)
        minutes = remainder // 60
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚è≥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –≥–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á–µ—Ä–µ–∑ {hours} —á –∏ {minutes} –º–∏–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π!"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–∞–π–¥—ã
    if not guides:
        await context.bot.send_message(chat_id=chat_id, text="üòï –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∞–π–¥–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∞–π–¥–∞–º–∏
    keyboard = [[InlineKeyboardButton(f"üìñ {name}", callback_data=name)] for name in guides.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text="üëâ –í—ã–±–∏—Ä–∞–π –≥–∞–π–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–∞–π–¥–∞
async def guide_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    guide_name = query.data
    user_id = query.from_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–∞–π–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–∞–π–¥–∞
    if guide_name in guides:
        user_last_guide[user_id] = datetime.now()
        await query.message.reply_text(f"üìù {guides[guide_name]}")
    await query.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
async def random_tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tips = [
        "üí° –ü–æ–¥—É–º–∞–π –Ω–∞ 10 —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥, –Ω–æ –∂–∏–≤–∏ –≤ –º–æ–º–µ–Ω—Ç–µ.",
        "üî• –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å–µ –∏–¥–µ—Ç –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è.",
        "üí™ –í–µ—Ä—å –≤ —Å–≤–æ–∏ —Å–∏–ª—ã. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –±–∏—Ç–≤–∞ ‚Äî –≤–Ω—É—Ç—Ä–∏.",
        "üìö –£—á–∏—Å—å, –≤–µ–¥—å –∑–Ω–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Å–∏–ª–∞.",
        "‚öîÔ∏è –†–∏—Å–∫—É–π –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Å—è ‚Äî –≤ –∫–æ–º—Ñ–æ—Ä—Ç–µ –Ω–µ—Ç –ø–æ–±–µ–¥."
    ]
    from random import choice
    await update.message.reply_text(choice(tips))

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_guide", add_guide))
    application.add_handler(CommandHandler("random_tip", random_tip))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–π–¥—ã"
    application.add_handler(MessageHandler(filters.Text("üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–π–¥—ã"), view_guides))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(guide_selection))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
