const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

const PORT = process.env.PORT || 8080;
const bot = new TelegramBot(process.env.BOT_TOKEN, {
    polling: true
});

const adminId = parseInt(process.env.ADMIN_ID);

const guides = new Map();
let userLastGuide = new Map();

bot.onText(/\/start/, async (msg) => {
    try {
        const keyboard = {
            reply_markup: {
                keyboard: [['üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–π–¥—ã']],
                resize_keyboard: true
            }
        };
        await bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –≥–∞–π–¥–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start:', error);
    }
});

bot.onText(/\/add_guide (.+) (.+)/, async (msg, match) => {
    try {
        if (msg.from.id !== adminId) {
            await bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–æ–≤');
            return;
        }

        const guideName = match[1];
        const guideContent = match[2];
        guides.set(guideName, guideContent);
        await bot.sendMessage(msg.chat.id, `–ì–∞–π–¥ "${guideName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ add_guide:', error);
    }
});

bot.on('message', async (msg) => {
    try {
        if (msg.text !== 'üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–∞–π–¥—ã') return;

        const chatId = msg.chat.id;
        const userId = msg.from.id;

        const now = Date.now();
        const lastGuideTime = userLastGuide.get(userId);
        
        if (lastGuideTime && now - lastGuideTime < 24 * 60 * 60 * 1000) {
            const timeLeft = 24 * 60 * 60 * 1000 - (now - lastGuideTime);
            const hoursLeft = Math.floor(timeLeft / (60 * 60 * 1000));
            const minutesLeft = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));
            await bot.sendMessage(chatId, `–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≥–∞–π–¥ —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–∏–π –≥–∞–π–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤ ${minutesLeft} –º–∏–Ω—É—Ç`);
            return;
        }

        if (guides.size === 0) {
            await bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∞–π–¥–æ–≤');
            return;
        }

        const inlineKeyboard = Array.from(guides.keys()).map(name => [{
            text: name,
            callback_data: name.substring(0, 32) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data
        }]);

        const keyboard = {
            reply_markup: {
                inline_keyboard: inlineKeyboard
            }
        };

        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–∞–π–¥:', keyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–∞–π–¥–æ–≤:', error);
    }
});

bot.on('callback_query', async (query) => {
    try {
        const chatId = query.message.chat.id;
        const userId = query.from.id;
        const guideName = query.data;

        if (guides.has(guideName)) {
            userLastGuide.set(userId, Date.now());
            await bot.sendMessage(chatId, guides.get(guideName));
        }
        
        await bot.answerCallbackQuery(query.id);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–∞–π–¥–∞:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Express –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
const express = require('express');
const app = express();

app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
});
–¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å package.json. –ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞:
JSON

{
  "name": "telegram-guide-bot",
  "version": "1.0.0",
  "description": "Telegram Bot for Guides",
  "main": "bot.js",
  "dependencies": {
    "node-telegram-bot-api": "^0.61.0",
    "dotenv": "^16.0.3",
    "express": "^4.18.2"
  },
  "scripts": {
    "start": "node bot.js"
  },
  "engines": {
    "node": "16.x"
  }
}
